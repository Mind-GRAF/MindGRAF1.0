Channel matchChannel1 = new MatchChannel();
Channel channel2 = new AntecedentToRuleChannel();
Channel channel3Channel = new RuleToConsequentChannel();
Channel matchChannel2 = new MatchChannel();
Channel matchChannel3 = new MatchChannel();
Channel channelAnt = new AntecedentToRuleChannel();
Channel matchChannel4 = new MatchChannel();
Channel ruletocons = new RuleToConsequentChannel();
// System.out.println(matchChannel1.getChannelType(matchChannel1));
// System.out.println(channel2.getChannelType(channel2));
// System.out.println(channel3Channel.getChannelType(channel3Channel));
// System.out.println(matchChannel2.getChannelType(matchChannel2));

ChannelPair match1 = new ChannelPair(matchChannel1);
// System.out.println(match1.getPair().getKey().getChannelType(match1.getPair().getKey()));
ChannelPair ant = new ChannelPair(channel2);
// System.out.println(ant.getPair().getKey().getChannelType(ant.getPair().getKey()));

ChannelPair rule = new ChannelPair(channel3Channel);
// System.out.println(rule.getPair().getKey().getChannelType(rule.getPair().getKey()));

ChannelPair match2 = new ChannelPair(matchChannel2);
// System.out.println(match2.getPair().getKey().getChannelType(match2.getPair().getKey()));
ChannelPair ruleToCons = new ChannelPair(ruletocons);
ChannelPair match3 = new ChannelPair(matchChannel4);
ChannelPair ant2 = new ChannelPair(channelAnt);
ChannelPair match4 = new ChannelPair(matchChannel3);
ChannelSet channelSet = new ChannelSet();

// Set<ChannelPair> channelSetMatch =
// channelPairs.getOrDefault(ChannelType.MATCHED, new HashSet<>());
// Set<ChannelPair> channelSetAnt =
// channelPairs.getOrDefault(ChannelType.AntRule, new HashSet<>());
// Set<ChannelPair> channelSetRule =
// channelPairs.getOrDefault(ChannelType.RuleCons, new HashSet<>());
channelSet.addChannelPair(match1);
channelSet.addChannelPair(ant);
channelSet.addChannelPair(rule);
channelSet.addChannelPair(match2);
// channelSetMatch.add(match1);
// channelSetMatch.add(match2);
// channelSetAnt.add(ant);
// channelSetRule.add(rule);
// channelPairs.put(ChannelType.MATCHED, channelSetMatch);
// channelPairs.put(ChannelType.RuleCons, channelSetRule);
// printContents();

// System.out.println("yayyyyyyyyy");

channelSet.addChannelPair(ruleToCons);
channelSet.addChannelPair(ant2);
channelSet.addChannelPair(match3);
channelSet.addChannelPair(match4);

printContents();



// strinset test

public static void main(String[] args) {
    Channel matchChannel1 = new MatchChannel(null, null, "reality", 2, 0, null);
    Channel channel2 = new AntecedentToRuleChannel(null, null, "fiction", 2, null);
    Channel channel3Channel = new RuleToConsequentChannel(null, null, "myth", 3, null);
    Channel matchChannel2 = new MatchChannel(null, null, "dcbjdsv", 2, 1, null);
    Channel matchChannel3 = new MatchChannel(null, null, "dcbjdsv", 3, 1, null);
    Channel channelAnt = new AntecedentToRuleChannel(null, null, "bfdbfdb", 2, null);
    Channel matchChannel4 = new MatchChannel(null, null, "hfghgfh", 3, 1, null);
    Channel ruletocons = new RuleToConsequentChannel(null, null, "mythology", 3, null);
    Channel fdegfdg = new RuleToConsequentChannel(null, null, "fdgdfgdfgdf", 5, null);

    String match1 = matchChannel1.stringifyChannelID();
    String ant = channel2.stringifyChannelID();

    String rule = channel3Channel.stringifyChannelID();

    String match2 = matchChannel2.stringifyChannelID();
    String ruleToCons = matchChannel3.stringifyChannelID();
    String match3 = channelAnt.stringifyChannelID();
    String ant2 = matchChannel4.stringifyChannelID();
    String match4 = ruletocons.stringifyChannelID();
    StringSet stringSet = new StringSet();

    stringSet.addChannel(matchChannel1);
    stringSet.addChannel(channel2);
    stringSet.addChannel(channel3Channel);
    stringSet.addChannel(matchChannel2);

    stringSet.addChannel(matchChannel3);
    stringSet.addChannel(channelAnt);
    stringSet.addChannel(matchChannel4);
    stringSet.addChannel(ruletocons);
    printHashtableContents(channelsIDs);

    System.out.println(getChannelsIDS());
    System.out.println(stringSet.getChannelID(fdegfdg));
}






//knownInstanceset test

public static void main(String[] args) {
    KnownInstanceSet set = new KnownInstanceSet();
    int[] k1 = { 1, 2 };
    int[] k2 = { 4, 5 };
    int[] k3 = { 6, 7 };
    int[] k4 = { 8, 9 };
    int[] k5 = { 10, 11 };

    KnownInstance KI1 = new KnownInstance("a/b", k1, 11, true);
    KnownInstance KI2 = new KnownInstance("c/b", k2, 12, false);
    KnownInstance KI3 = new KnownInstance("f/s", k3, 13, false);
    KnownInstance KI4 = new KnownInstance("d/a", k4, 11, true);
    KnownInstance KI6 = new KnownInstance("a/b", k4, 12, true);
    KnownInstance KI5 = new KnownInstance("a/b", k5, 11, true);

    set.addKnownInstance(KI1);
    printKnownInstances(set.positiveKInstances, set.negativeKInstances);
    System.out.println("end");
    set.addKnownInstance(KI2);
    printKnownInstances(set.positiveKInstances, set.negativeKInstances);
    System.out.println("end");

    set.addKnownInstance(KI3);
    printKnownInstances(set.positiveKInstances, set.negativeKInstances);
    System.out.println("end");

    set.addKnownInstance(KI4);
    printKnownInstances(set.positiveKInstances, set.negativeKInstances);
    System.out.println("end");
    set.addKnownInstance(KI5);
    printKnownInstances(set.positiveKInstances, set.negativeKInstances);
    System.out.println("end");
    set.addKnownInstance(KI6);
    printKnownInstances(set.positiveKInstances, set.negativeKInstances);
    System.out.println("end");

}




//establish channel test
Network network = new Network();
Scheduler.initiate();

Node base1 = Network.createNode("Mariam", "propositionnode"); // Proposition Node
Node base2 = Network.createNode("Tarek", "propositionnode"); // Proposition Node
Node base3 = Network.createNode("khayat", "propositionnode"); // Proposition Node

Request newRequest = ((PropositionNode) base1).establishChannel(ChannelType.MATCHED, base2, null, null,
        "reality", 1, 2, base1);
Request newRequest2 = ((PropositionNode) base1).establishChannel(ChannelType.RuleCons, base3, null, null,
        "reality", 1, 2, base1);
Request newRequest3 = ((PropositionNode) base1).establishChannel(ChannelType.RuleCons, base3, null, null,
        "reality", 1, 2, base1);
// System.out.println(newRequest.stringifyRequest());
// Scheduler.addToLowQueue(newRequest);
// Scheduler.addToLowQueue(newRequest2);

// Scheduler.printLowQueue();



//testing send Report
Network network = new Network();
Scheduler.initiate();

Node base1 = Network.createNode("Mariam", "propositionnode"); // Proposition Node
Node base2 = Network.createVariableNode("X", "propositionnode"); // Proposition Node
Node base3 = Network.createNode("Tarek", "propositionnode"); // Proposition
Node base4 = Network.createVariableNode("Y", "propositionnode"); // Proposition
Node base5 = Network.createNode("Tarek", "propositionnode"); // Proposition
Node base6 = Network.createVariableNode("Z", "propositionnode"); // Proposition
Node base7 = Network.createNode("jfenkdwn", "propositionnode"); // Proposition
Substitutions subs1 = new Substitutions();
subs1.add(base2, base1);
subs1.add(base4, base5);
Substitutions subs2 = new Substitutions();
subs2.add(base6, base5);
// subs2.add(base2, base1);

System.out.println(subs1.toString());
Channel matchChannel1 = new MatchChannel(null, subs1, "reality", 2, 0, base3);
// Channel channel2 = new AntecedentToRuleChannel(null, null, "fiction", 2,
// null);
Report newReport = new Report(subs2, null, 1, true, InferenceType.BACKWARD, base3);
newReport.setContextName("reality");
System.out.println(((PropositionNode) base1).sendReport(newReport, matchChannel1));
Scheduler.printHighQueue();



//switchSubs

Network network = new Network();
Scheduler.initiate();

Node base1 = Network.createNode("X", "propositionnode"); // Proposition Node
Node base2 = Network.createVariableNode("A", "propositionnode"); // Proposition Node
Node base3 = Network.createNode("Y", "propositionnode"); // Proposition
Node base4 = Network.createVariableNode("B", "propositionnode"); // Proposition
Node base5 = Network.createNode("Z", "propositionnode"); // Proposition
Node base6 = Network.createVariableNode("Y", "propositionnode"); // Proposition
Substitutions subs1 = new Substitutions();
subs1.add(base2, base1);
subs1.add(base4, base3);
Substitutions subs2 = new Substitutions();
subs2.add(base6, base5);
Substitutions newSubs = subs1.switchReport(subs2);
System.out.println(newSubs.toString());


//openNodeNotBound
Network network = new Network();
Scheduler.initiate();

Node base1 = Network.createNode("X", "propositionnode"); // Proposition Node
Node base2 = Network.createVariableNode("A", "propositionnode"); // Proposition Node
Node base3 = Network.createNode("Y", "propositionnode"); // Proposition
Node base4 = Network.createVariableNode("B", "propositionnode"); // Proposition
Node base5 = Network.createNode("Z", "propositionnode"); // Proposition
Node base6 = Network.createVariableNode("Y", "propositionnode"); // Proposition
Substitutions subs1 = new Substitutions();
subs1.add(base4, base3);
subs1.add(base2, base1);
NodeSet freeVariables = new NodeSet();
freeVariables.add(base2);
freeVariables.add(base6);
freeVariables.add(base4);
base5.setFreeVariableSet(freeVariables);
boolean newSubs = ((PropositionNode) base5).isOpenNodeNotBound(subs1);
System.out.println(newSubs);

//onlyRelevantSubs
Network network = new Network();
Scheduler.initiate();

Node base1 = Network.createNode("A", "propositionnode"); // Proposition Node
Node base2 = Network.createVariableNode("X", "propositionnode"); // Proposition Node
Node base4 = Network.createVariableNode("X", "propositionnode"); // Proposition Node

Node base3 = Network.createNode("B", "propositionnode"); // Proposition
Node base5 = Network.createNode("C", "propositionnode"); // Proposition
Node base6 = Network.createVariableNode("Y", "propositionnode"); // Proposition
Node base7 = Network.createVariableNode("Z", "propositionnode"); // Proposition

Substitutions subs1 = new Substitutions();
subs1.add(base2, base3);
subs1.add(base4, base1);
subs1.add(base6, base5);

NodeSet freeVariables = new NodeSet();
freeVariables.add(base7);
base5.setFreeVariableSet(freeVariables);
Substitutions newSubs = ((PropositionNode) base5).onlyRelevantSubs(subs1);
System.out.println(newSubs.toString());


