/* MindGRAF_Parser.java */
/* Generated By:JavaCC: Do not edit this line. MindGRAF_Parser.java */
package edu.guc.mind_graf.parser;
import edu.guc.mind_graf.context.ContextController;
import edu.guc.mind_graf.set.Set;
import java.util.Hashtable;
import java.util.HashMap;


public class MindGRAF_Parser implements MindGRAF_ParserConstants {
      private ContextController controller = new ContextController();
      private int mode = 1;
  public static void main(String[] args) throws ParseException {
    // Instantiate the parser
    MindGRAF_Parser parser = new MindGRAF_Parser(System.in);
    try {
      // Start parsing
      parser.Start();

      System.out.println("Parsing successful!");
    } catch (ParseException e) {
      // Handle parsing errors
      System.err.println("Parsing failed: " + e.getMessage());
    }
  }

// Define the grammar
  final public void Start() throws ParseException {
    Command();
}

  final public void Expression() throws ParseException {
    Term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 27:
      case 28:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 27:{
        jj_consume_token(27);
        Term();
        break;
        }
      case 28:{
        jj_consume_token(28);
        Term();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Term() throws ParseException {
    Factor();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 29:{
      jj_consume_token(29);
      Factor();
      break;
      }
    case 30:{
      jj_consume_token(30);
      Factor();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      jj_consume_token(NUMBER);
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Command() throws ParseException, ParseException {Token stringToken;
     Token t = null;
        Token wffNameList = null;
       Token attitudeSet = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case currContext:{
      jj_consume_token(currContext);
try {
        String s = ContextController.getCurrContextName();
        System.out.println(s);
      } catch (Exception e) {
        System.out.println("No Current Context");
      }
      break;
      }
    case GetAttitudeNames:{
      jj_consume_token(GetAttitudeNames);
HashMap<String, Integer> attitudeNames = ContextController.getAttitudes().getSet();
            System.out.println("List of attitude names:");

          // Iterate over the attitude names and print them
        for (String key : attitudeNames.keySet()) {
          System.out.println(key);
        }
      break;
      }
    case MODE1:{
      jj_consume_token(MODE1);
mode = 1;
       System.out.println("Operating in mode 1 (Default)");
      System.out.println(mode);
      break;
      }
    case MODE2:{
      jj_consume_token(MODE2);
mode = 2;
      System.out.println("Operating in mode 2");
      System.out.println(mode);
      break;
      }
    case MODE3:{
      jj_consume_token(MODE3);
mode = 3;
      System.out.println("Operating in mode 3");
      System.out.println(mode);
      break;
      }
    case DEFINE_CONTEXT:{
      jj_consume_token(DEFINE_CONTEXT);
      stringToken = jj_consume_token(CNAME);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        wffNameList = jj_consume_token(WFF_NAME_LIST);
        jj_consume_token(RPAREN);
        jj_consume_token(LPAREN);
        attitudeSet = jj_consume_token(ATTITUDE_SET);
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
String cname = stringToken.image;
                // Check if both WFF_NAME_LIST and ATTITUDE_SET were provided
                if (wffNameList != null && attitudeSet != null) {
                    // Check if their lengths are equal
                    String[] wffList = wffNameList.image.substring(0).split(",");
                String[] attitudes = attitudeSet.image.substring(0).split(",");
                    if (wffList.length != attitudes.length) {
                        {if (true) throw new ParseException("WFF_NAME_LIST and ATTITUDE_SET must have the same length.");}
                    }

                    // Check if each attitude in ATTITUDE_SET is in the initial set
                    for (String attitude : attitudes) {
                        if (!ContextController.getAttitudes().getSet().containsKey(attitude)) {
                            {if (true) throw new ParseException("Invalid attitude in ATTITUDE_SET: " + attitude);}
                        }
                    }
                 System.out.println("context " + cname + " is defined.");

                }
                else{
                   System.out.println("context " + cname + " is defined.");

                }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Setup() throws ParseException, ParseException {Token attitudeSetToken;
    HashMap<String, Integer> hash = new HashMap<String, Integer>();
    controller.getAttitudes().setSet(hash);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SET_ATTITUDES:{
      jj_consume_token(SET_ATTITUDES);
      jj_consume_token(LBRACE);
      attitudeSetToken = jj_consume_token(ATTITUDE_SET);
      jj_consume_token(RBRACE);
// Extract the string representation of the token
            String attitudeSet = attitudeSetToken.image;

            // Manipulate the string to extract individual attitudes
            String[] attitudes = attitudeSet.substring(0).split(",");

           // Process each individual attitude
        for (int i = 0; i < attitudes.length; i++) {
          // Trim any leading or trailing spaces
          String trimmedAttitude = attitudes[i].trim();
          if(trimmedAttitude.toLowerCase().equals("belief"))
          hash.put( trimmedAttitude,i + 1);
          // Perform further operations on the individual attitudes
          System.out.println("Attitude: " + trimmedAttitude);
        }
        // Pass the attitudes to the controller
        controller.getAttitudes().setSet(hash);
        hash.put("Belief", 0);
      break;
      }
    case N:{
      jj_consume_token(N);
System.out.println("User chose not to enter attitudes.");
            System.out.println();
            hash.put("Belief",0);
            // Handle the case where the user chooses not to enter attitudes

      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public MindGRAF_ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x18000000,0x18000000,0x60000000,0x60,0x40,0x1f800,0x1020000,};
	}

  /** Constructor with InputStream. */
  public MindGRAF_Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MindGRAF_Parser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MindGRAF_ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MindGRAF_Parser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MindGRAF_ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MindGRAF_ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MindGRAF_Parser(MindGRAF_ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MindGRAF_ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[31];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 7; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 31; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
