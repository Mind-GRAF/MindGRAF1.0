/* MindGRAF_Parser.java */
/* Generated By:JavaCC: Do not edit this line. MindGRAF_Parser.java */
package edu.guc.mind_graf.parser;
import edu.guc.mind_graf.context.ContextController;
import java.util.ArrayList;
import java.util.HashMap;
import edu.guc.mind_graf.set.NodeSet;
import edu.guc.mind_graf.set.Set;
import edu.guc.mind_graf.cables.DownCable;
import edu.guc.mind_graf.cables.DownCableSet;
import edu.guc.mind_graf.caseFrames.Adjustability;
import java.util.Collection;
import edu.guc.mind_graf.exceptions.NoSuchTypeException;
import edu.guc.mind_graf.nodes.Node;
import edu.guc.mind_graf.relations.Relation;

public class MindGRAF_Parser implements MindGRAF_ParserConstants {
      private ContextController controller = new ContextController();
      private int mode = 1;
      static boolean uvbrEnabled;


      //setting the attitudes 
      private static int attitudeNumber = 1;
      private static HashMap<String, Integer> initialAttitudes = new HashMap<String, Integer>();

     //setting the consistent attitudes
      private static ArrayList<ArrayList<Integer>> consisAttitudeLists = new ArrayList<ArrayList<Integer>>();
      private  static ArrayList<Integer> consisAttitudeList = new ArrayList<Integer>();
      private static int currConsisAttitude;

      //setting closed under conjunction Attitudes
      private static ArrayList<ArrayList<Integer>> conjunctionAttitudeLists = new ArrayList<ArrayList<Integer>>();
      private  static ArrayList<Integer> conjunctionAttitudeList = new ArrayList<Integer>();
      private static int currConjunctionAttitude;

      //setting closed under consequence Attitudes
      private static ArrayList<ArrayList<Integer>> consequenceAttitudeLists = new ArrayList<ArrayList<Integer>>();
      private  static ArrayList<Integer> consequenceAttitudeList = new ArrayList<Integer>();
      private static int currConseqAttitude;

       //setting telescopable Attitudes
      private static ArrayList<ArrayList<Integer>> teleAttitudeLists = new ArrayList<ArrayList<Integer>>();
      private  static ArrayList<Integer> teleAttitudeList = new ArrayList<Integer>();
      private static int currTeleAttitude;

      //mode1 creation of nodes
      private static  ArrayList<String> NodesNames = new ArrayList<String>();
      private static boolean isVariable;

        @SuppressWarnings("static-access")

  public static void main(String[] args) throws ParseException {
    // Instantiate the parser
    MindGRAF_Parser parser = new MindGRAF_Parser(System.in);
   /* try {
      // Start parsing
      parser.Start();

      System.out.println("Parsing successful!");
    } catch (ParseException e) {
      // Handle parsing errors
      System.err.println("Parsing failed: " + e.getMessage());
    }*/
  }

// Define the grammar
  final public 
void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ANDOR_THRESH:{
      AndOrExpression();
      break;
      }
    case PREDICATE_NAME_BRACKET:{
      Predicate();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void AndOrExpression() throws ParseException {Token connective;
    jj_consume_token(ANDOR_THRESH);
    jj_consume_token(NUMBER);
    jj_consume_token(21);
    jj_consume_token(NUMBER);
    jj_consume_token(22);
    jj_consume_token(23);
    ExpressionList();
    jj_consume_token(24);

}

  final public void ExpressionList() throws ParseException {
    Expression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(21);
      Expression();
    }
}

  final public void Predicate() throws ParseException {Token num;
  Token predicateName;
    predicateName = jj_consume_token(PREDICATE_NAME_BRACKET);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      num = jj_consume_token(NUMBER);
      jj_consume_token(21);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    Arguments();
    jj_consume_token(22);
String predName = predicateName.image.trim().toLowerCase();
  predName = predName.substring(0,predName.length()-1);
    if (mode == 1) {
      HashMap<String, DownCable> cableSet = new HashMap<String, DownCable>();
      try {
        Node n = controller.getNetwork().createNode(predName, "propositionnode");
        Relation r = controller.getNetwork().createRelation("r", "propositionnode",
            Adjustability.EXPAND, 2);
        DownCable c = new DownCable(r, new NodeSet(n));
        cableSet.put(r.getName(), c);

        for (int i = 0; i < NodesNames.size(); i++) {
          String nodeName = NodesNames.get(i);
          Node node;
          if(nodeName.charAt(nodeName.length() - 1)=='?')
            node = controller.getNetwork().createVariableNode(nodeName.substring(0,nodeName.length()-1), "propositionnode");
          else
            node = controller.getNetwork().createNode(nodeName, "propositionnode");
          Relation relation = controller.getNetwork().createRelation("a" + (i + 1), "propositionnode",
              Adjustability.EXPAND, 2);
          DownCable cable = new DownCable(relation, new NodeSet(node));
          cableSet.put(relation.getName(), cable);
        }
        NodesNames.clear();
        DownCableSet dcSet = new DownCableSet(cableSet);
        controller.getNetwork().createNode("propositionnode", dcSet);

        //printing

      } catch (NoSuchTypeException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }


    }
}

  final public void Arguments() throws ParseException {
    Argument();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(21);
      Argument();
    }
}

  final public void Argument() throws ParseException {Token Argument;
Token var=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      Argument = jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIABLE:{
        var = jj_consume_token(VARIABLE);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
String argString = Argument.image.trim().toLowerCase();
  if(var!=null)
  argString +='?';
  NodesNames.add(argString);
      break;
      }
    case ANDOR_THRESH:
    case PREDICATE_NAME_BRACKET:{
      ExpressionList();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Command() throws ParseException, ParseException {Token stringToken;
     Token t = null;
        Token wffNameList = null;
       Token attitudeSet = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case currContext:
    case GetAttitudeNames:
    case MODE1:
    case MODE2:
    case MODE3:
    case 25:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case currContext:{
        jj_consume_token(currContext);
try {
        String s = ContextController.getCurrContextName();
        System.out.println(s);
      } catch (Exception e) {
        System.out.println("No Current Context");
      }
        break;
        }
      case GetAttitudeNames:{
        jj_consume_token(GetAttitudeNames);
HashMap<String, Integer> attitudeNames = ContextController.getAttitudes().getSet();
            System.out.println("List of attitude names:");

          // Iterate over the attitude names and print them
        for (String key : attitudeNames.keySet()) {
          System.out.println(key);
        }
        break;
        }
      case MODE1:{
        jj_consume_token(MODE1);
mode = 1;
       System.out.println("Operating in mode 1 (Default)");
      System.out.println(mode);
        break;
        }
      case MODE2:{
        jj_consume_token(MODE2);
mode = 2;
      System.out.println("Operating in mode 2");
      System.out.println(mode);
        break;
        }
      case MODE3:{
        jj_consume_token(MODE3);
mode = 3;
      System.out.println("Operating in mode 3");
      System.out.println(mode);
        break;
        }
      case 25:{
        jj_consume_token(25);
        stringToken = jj_consume_token(STRING);
        defineContext();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case 26:{
      jj_consume_token(26);
      Expression();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void UVBR() throws ParseException, ParseException {Token value;
    jj_consume_token(27);
    value = jj_consume_token(BOOL);
String boolValue = value.image.trim().toLowerCase();
      if (boolValue.equals("true")) {
          uvbrEnabled=true;
      } else if (boolValue.equals("false")) {
          uvbrEnabled=false;
      }
      System.out.println("UVBR is set to "+uvbrEnabled);
      Set attitudeNames = new Set();
      attitudeNames.setSet(initialAttitudes);
      controller.setUp(attitudeNames,consisAttitudeLists,uvbrEnabled);

      System.out.print("uvbr: "+controller.isUvbrEnabled());
      System.out.println("consis attitudes:" );
      for(ArrayList<Integer> i : controller.getConsistentAttitudes())
     { System.out.println("SET " + i+1);
      for( Integer x : i)
        System.out.print(x+" ");}
         System.out.print("attitudeNumbers");
      for(String key : controller.getAttitudes().getSet().keySet())
        System.out.println(key+": " +controller.getAttitudeNumber(key));
}

  final public void Setup() throws ParseException, ParseException {Token attitudeSetToken;
    HashMap<String, Integer> hash = new HashMap<String, Integer>();
    //controller.getAttitudes().setSet(hash);
    initialAttitudes.put("belief",0);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 28:{
      jj_consume_token(28);
      jj_consume_token(23);
      attitude();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 21:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(21);
        attitude();
      }
      jj_consume_token(24);
System.out.println("Attitudes Defined:");
    for(String key : initialAttitudes.keySet()){
    System.out.println(key);
   }
      break;
      }
    case N:{
      jj_consume_token(N);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void defineContext() throws ParseException, ParseException {
    jj_consume_token(23);
    wffAttitudeSet();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(21);
      wffAttitudeSet();
    }
    jj_consume_token(24);

}

  final public void wffAttitudeSet() throws ParseException, ParseException {
    jj_consume_token(23);
    jj_consume_token(WFF_NAME);
    jj_consume_token(21);
    jj_consume_token(STRING);
    jj_consume_token(24);
}

  final public void attitude() throws ParseException, ParseException {Token attitude;
    attitude = jj_consume_token(STRING);
String a = attitude.image.trim().toLowerCase();
if(initialAttitudes.containsKey(a))
{if (true) throw new ParseException("duplicate attitudes");}
initialAttitudes.put(a,attitudeNumber);
attitudeNumber++;
}

  final public void underTeleAttitudes() throws ParseException, ParseException {
    jj_consume_token(29);
    label_5:
    while (true) {
      teleAttitudeList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 23:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
    }
for (ArrayList<Integer> list : teleAttitudeLists) {
            for (Integer num : list) {
                System.out.print(num + " ");
            }
            System.out.println(); // Move to the next line after printing each inner list
        }
}

  final public void teleAttitudeList() throws ParseException, ParseException {Token attitude;
    jj_consume_token(23);
    OneAttitudeInTeleList();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(21);
      OneAttitudeInTeleList();
    }
    jj_consume_token(24);
ArrayList<Integer> finalTeleList = new ArrayList<Integer>();
  for(int i = 0;i<teleAttitudeList.size();i++){
    finalTeleList.add(teleAttitudeList.get(i));
  }

teleAttitudeLists.add(finalTeleList);
teleAttitudeList.clear();

                System.out.println("now printing all contents:");

    for (ArrayList<Integer> list : teleAttitudeLists) {
            for (Integer num : list) {
                System.out.print(num + " ");
            }
            System.out.println(); // Move to the next line after printing each inner list
        }
System.out.print(teleAttitudeList.size()+" the size..");
System.out.println(teleAttitudeList.size()+" the size..");
System.out.println(finalTeleList.size()+" the size of the final list");
}

  final public void OneAttitudeInTeleList() throws ParseException, ParseException {Token attitude;
    attitude = jj_consume_token(STRING);
String s = attitude.image.trim().toLowerCase();
  if(!initialAttitudes.containsKey(s))
    {if (true) throw new ParseException("Not in initially Defined Attitudes");}
  currTeleAttitude = initialAttitudes.get(s);
  teleAttitudeList.add(currTeleAttitude);
}

  final public void underConsequenceAttitudes() throws ParseException, ParseException {
    jj_consume_token(30);
    label_7:
    while (true) {
      consequenceAttitudeList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 23:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
    }
for (ArrayList<Integer> list : consequenceAttitudeLists) {
            for (Integer num : list) {
                System.out.print(num + " ");
            }
            System.out.println(); // Move to the next line after printing each inner list
        }
}

  final public void consequenceAttitudeList() throws ParseException, ParseException {Token attitude;
    jj_consume_token(23);
    OneAttitudeInConsequenceList();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      jj_consume_token(21);
      OneAttitudeInConsequenceList();
    }
    jj_consume_token(24);
ArrayList<Integer> finalConsequenceList = new ArrayList<Integer>();
  for(int i = 0;i<consequenceAttitudeList.size();i++){
    finalConsequenceList.add(consequenceAttitudeList.get(i));
  }

consequenceAttitudeLists.add(finalConsequenceList);
consequenceAttitudeList.clear();

                System.out.println("now printing all contents:");

    for (ArrayList<Integer> list : consequenceAttitudeLists) {
            for (Integer num : list) {
                System.out.print(num + " ");
            }
            System.out.println(); // Move to the next line after printing each inner list
        }
System.out.print(consequenceAttitudeList.size()+" the size..");
System.out.println(consequenceAttitudeList.size()+" the size..");
System.out.println(finalConsequenceList.size()+" the size of the final list");
}

  final public void OneAttitudeInConsequenceList() throws ParseException, ParseException {Token attitude;
    attitude = jj_consume_token(STRING);
String s = attitude.image.trim().toLowerCase();
  if(!initialAttitudes.containsKey(s))
    {if (true) throw new ParseException("Not in initially Defined Attitudes");}
  currConseqAttitude = initialAttitudes.get(s);
  consequenceAttitudeList.add(currConseqAttitude);
}

  final public void underConjunctionAttitudes() throws ParseException, ParseException {
    jj_consume_token(31);
    label_9:
    while (true) {
      conjunctionAttitudeList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 23:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
    }
for (ArrayList<Integer> list : conjunctionAttitudeLists) {
            for (Integer num : list) {
                System.out.print(num + " ");
            }
            System.out.println(); // Move to the next line after printing each inner list
        }
}

  final public void conjunctionAttitudeList() throws ParseException, ParseException {Token attitude;
    jj_consume_token(23);
    OneAttitudeInConjunctionList();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      jj_consume_token(21);
      OneAttitudeInConjunctionList();
    }
    jj_consume_token(24);
ArrayList<Integer> finalConjunctionList = new ArrayList<Integer>();
  for(int i = 0;i<conjunctionAttitudeList.size();i++){
    finalConjunctionList.add(conjunctionAttitudeList.get(i));
  }

conjunctionAttitudeLists.add(finalConjunctionList);
conjunctionAttitudeList.clear();

                System.out.println("now printing all contents:");

    for (ArrayList<Integer> list : conjunctionAttitudeLists) {
            for (Integer num : list) {
                System.out.print(num + " ");
            }
            System.out.println(); // Move to the next line after printing each inner list
        }
System.out.print(conjunctionAttitudeList.size()+" the size..");
System.out.println(conjunctionAttitudeList.size()+" the size..");
System.out.println(finalConjunctionList.size()+" the size of the final list");
}

  final public void OneAttitudeInConjunctionList() throws ParseException, ParseException {Token attitude;
    attitude = jj_consume_token(STRING);
String s = attitude.image.trim().toLowerCase();
  if(!initialAttitudes.containsKey(s))
    {if (true) throw new ParseException("Not in initially Defined Attitudes");}
  currConsisAttitude = initialAttitudes.get(s);
  conjunctionAttitudeList.add(currConjunctionAttitude);
}

  final public void consistentAttitudes() throws ParseException, ParseException {
    jj_consume_token(32);
    label_11:
    while (true) {
      consisAttitudeList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 23:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_11;
      }
    }
for (ArrayList<Integer> list : consisAttitudeLists) {
            for (Integer num : list) {
                System.out.print(num + " ");
            }
            System.out.println(); // Move to the next line after printing each inner list
        }
}

  final public void consisAttitudeList() throws ParseException, ParseException {Token attitude;
    jj_consume_token(23);
    OneAttitudeInConsisList();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      jj_consume_token(21);
      OneAttitudeInConsisList();
    }
    jj_consume_token(24);
ArrayList<Integer> finalConsisList = new ArrayList<Integer>();
  for(int i = 0;i<consisAttitudeList.size();i++){
    finalConsisList.add(consisAttitudeList.get(i));
  }

consisAttitudeLists.add(finalConsisList);
consisAttitudeList.clear();

                System.out.println("now printing all contents:");

    for (ArrayList<Integer> list : consisAttitudeLists) {
            for (Integer num : list) {
                System.out.print(num + " ");
            }
            System.out.println(); // Move to the next line after printing each inner list
        }
System.out.print(consisAttitudeList.size()+" the size..");
System.out.println(consisAttitudeList.size()+" the size..");
System.out.println(finalConsisList.size()+" the size of the final list");
}

  final public void OneAttitudeInConsisList() throws ParseException, ParseException {Token attitude;
    attitude = jj_consume_token(STRING);
String s = attitude.image.trim().toLowerCase();
  if(!initialAttitudes.containsKey(s))
    {if (true) throw new ParseException("Not in initially Defined Attitudes");}
  currConsisAttitude = initialAttitudes.get(s);
  consisAttitudeList.add(currConsisAttitude);
}

  /** Generated Token Manager. */
  public MindGRAF_ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x110000,0x200000,0x20,0x200000,0x20000,0x190000,0x20007c0,0x60007c0,0x200000,0x10000800,0x200000,0x800000,0x200000,0x800000,0x200000,0x800000,0x200000,0x800000,0x200000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public MindGRAF_Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MindGRAF_Parser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MindGRAF_ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MindGRAF_Parser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MindGRAF_ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MindGRAF_ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MindGRAF_Parser(MindGRAF_ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MindGRAF_ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[33];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 19; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 33; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
