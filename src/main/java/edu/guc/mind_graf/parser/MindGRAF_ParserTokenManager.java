/* MindGRAF_ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MindGRAF_ParserTokenManager.java */
package edu.guc.mind_graf.parser;
import edu.guc.mind_graf.context.ContextController;
import edu.guc.mind_graf.components.CustomMethod;
import edu.guc.mind_graf.nodes.IndividualNode;
import edu.guc.mind_graf.network.NetworkController;
import edu.guc.mind_graf.components.Substitutions;
import edu.guc.mind_graf.paths.IrreflexiveRestrictPath;
import edu.guc.mind_graf.paths.DomainRestrictPath;
import edu.guc.mind_graf.paths.BUnitPath;
import edu.guc.mind_graf.paths.BangPath;
import edu.guc.mind_graf.paths.OrPath;
import edu.guc.mind_graf.paths.EmptyPath;
import edu.guc.mind_graf.paths.FUnitPath;
import edu.guc.mind_graf.paths.AndPath;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashMap;
import java.io.StringReader;
import edu.guc.mind_graf.paths.KPlusPath;
import edu.guc.mind_graf.paths.KStarPath;
import edu.guc.mind_graf.nodes.ActNode;
import edu.guc.mind_graf.nodes.DoAllNode;
import edu.guc.mind_graf.nodes.AchieveNode;
import edu.guc.mind_graf.nodes.AttitudeNode;
import edu.guc.mind_graf.nodes.DoOneNode;
import edu.guc.mind_graf.nodes.MGIfNode;
import edu.guc.mind_graf.nodes.MGIterateNode;
import edu.guc.mind_graf.nodes.MGSequenceNode;
import edu.guc.mind_graf.set.NodeSet;
import edu.guc.mind_graf.set.Set;
import java.util.HashSet;
import java.util.Hashtable;
import edu.guc.mind_graf.paths.ConversePath;
import edu.guc.mind_graf.paths.ComposePath;
import edu.guc.mind_graf.paths.Path;
import edu.guc.mind_graf.cables.DownCable;
import edu.guc.mind_graf.cables.DownCableSet;
import edu.guc.mind_graf.caseFrames.Adjustability;
import edu.guc.mind_graf.context.Context;
import java.util.Collection;
import edu.guc.mind_graf.exceptions.NoSuchTypeException;
import edu.guc.mind_graf.mgip.reports.KnownInstance;
import edu.guc.mind_graf.exceptions.DirectCycleException;
import edu.guc.mind_graf.exceptions.NoPlansExistForTheActException;
import edu.guc.mind_graf.network.Network;
import edu.guc.mind_graf.nodes.Node;
import edu.guc.mind_graf.paths.RangeRestrictPath;
import edu.guc.mind_graf.relations.Relation;
import edu.guc.mind_graf.nodes.PropositionNode;
import edu.guc.mind_graf.set.PropositionNodeSet;
import edu.guc.mind_graf.support.Pair;

/** Token Manager. */
@SuppressWarnings ("unused")
public class MindGRAF_ParserTokenManager implements MindGRAF_ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 23;
            return 42;
         }
         if ((active0 & 0xb19100000000000L) != 0L || (active1 & 0x8000000000430L) != 0L)
         {
            jjmatchedKind = 23;
            return 22;
         }
         if ((active0 & 0x200400000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 23;
            return 53;
         }
         if ((active1 & 0x800000000L) != 0L)
            return 25;
         if ((active0 & 0x10e04bfa040807c0L) != 0L || (active1 & 0xf7f800002722ceL) != 0L)
         {
            jjmatchedKind = 23;
            return 70;
         }
         if ((active0 & 0xe406040000000000L) != 0L || (active1 & 0xd101L) != 0L)
         {
            jjmatchedKind = 23;
            return 5;
         }
         return -1;
      case 1:
         if ((active0 & 0x19800000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 52;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 4;
         }
         if ((active0 & 0x18100000000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 21;
         }
         if ((active0 & 0xffe7ea62000807c0L) != 0L || (active1 & 0xfff8000027f67fL) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 70;
         }
         return -1;
      case 2:
         if ((active0 & 0x18020000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x19800000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 3;
         }
         if ((active0 & 0xffe7f866000807c0L) != 0L || (active1 & 0xfff8000027fe7fL) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 70;
         }
         return -1;
      case 3:
         if ((active0 & 0x18020000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x19800000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xe4000400000007c0L) != 0L || (active1 & 0xf7f80000071241L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1be7f86200080000L) != 0L || (active1 & 0x800000020ec3eL) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
            return 70;
         }
         return -1;
      case 4:
         if ((active0 & 0x1000400000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x18020000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x19800000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xe4000400000007c0L) != 0L || (active1 & 0xf7f80000071241L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xba7b86200080000L) != 0L || (active1 & 0x800000020ec3eL) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
            return 70;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000400000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xa00000000000L) != 0L || (active1 & 0x6L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x18020000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x19800000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xe4000400000007c0L) != 0L || (active1 & 0xf7f80000071241L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xba7186200080000L) != 0L || (active1 & 0x800000020ec38L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 5;
            return 70;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000400000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xa00000000000L) != 0L || (active1 & 0x6L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xb01100000000000L) != 0L || (active1 & 0x8000000200830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18020000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x19800000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xe4000400000007c0L) != 0L || (active1 & 0xf7f80000071241L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xa6086200000000L) != 0L || (active1 & 0xe408L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 6;
            }
            return 70;
         }
         return -1;
      case 7:
         if ((active0 & 0x1000400000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xa00000000000L) != 0L || (active1 & 0x6L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xb01100000000000L) != 0L || (active1 & 0x8000000200830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x64000400000007c0L) != 0L || (active1 & 0xf7780000071241L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x82084200000000L) != 0L || (active1 & 0xc400L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 7;
            return 70;
         }
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2008L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x1000400000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xa00000000000L) != 0L || (active1 & 0x6L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xb01100000000000L) != 0L || (active1 & 0x8000000200830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x64000400000007c0L) != 0L || (active1 & 0xf7780000071241L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x80080200000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 8;
            return 70;
         }
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0xc400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2008L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xa00000000000L) != 0L || (active1 & 0x6L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xb01100000000000L) != 0L || (active1 & 0x8000000200830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x64000000000007c0L) != 0L || (active1 & 0xf7780000071241L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x80200000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 9;
            return 70;
         }
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0xc400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2008L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x200000000000L) != 0L || (active1 & 0x6L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xb01100000000000L) != 0L || (active1 & 0x8000000200830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 10;
            return 70;
         }
         if ((active0 & 0x20000000000000c0L) != 0L || (active1 & 0xf7780000071240L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0xc400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2008L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xb00100000000000L) != 0L || (active1 & 0x8000000200830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0xc0L) != 0L || (active1 & 0xf6780000071240L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0xc400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xa00100000000000L) != 0L || (active1 & 0x8000000200830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0xc0L) != 0L || (active1 & 0xf4580000021240L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0xc400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xa00100000000000L) != 0L || (active1 & 0x8000000000830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x40L) != 0L || (active1 & 0xf0180000021040L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xa00100000000000L) != 0L || (active1 & 0x830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x40L) != 0L || (active1 & 0xf0180000020040L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x40L) != 0L || (active1 & 0xf0180000020040L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0xe0180000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0xe0180000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0xe0180000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x830L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0xe0180000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x30L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0xe0180000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active1 & 0xe0180000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active1 & 0x80180000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active1 & 0x80180000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active1 & 0x80180000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 23;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 102);
      case 34:
         return jjStopAtPos(0, 92);
      case 35:
         return jjStopAtPos(0, 105);
      case 36:
         return jjStopAtPos(0, 106);
      case 37:
         return jjStopAtPos(0, 103);
      case 38:
         return jjStartNfaWithStates_0(0, 99, 25);
      case 39:
         return jjStopAtPos(0, 91);
      case 40:
         return jjStopAtPos(0, 30);
      case 41:
         return jjStopAtPos(0, 29);
      case 42:
         return jjStopAtPos(0, 95);
      case 43:
         return jjStopAtPos(0, 94);
      case 44:
         return jjStopAtPos(0, 27);
      case 45:
         return jjStopAtPos(0, 93);
      case 46:
         return jjStopAtPos(0, 86);
      case 47:
         return jjStopAtPos(0, 96);
      case 58:
         return jjStopAtPos(0, 88);
      case 59:
         return jjStopAtPos(0, 87);
      case 60:
         return jjStopAtPos(0, 89);
      case 61:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 62:
         return jjStopAtPos(0, 90);
      case 63:
         return jjStopAtPos(0, 21);
      case 64:
         return jjStopAtPos(0, 104);
      case 91:
         return jjStopAtPos(0, 83);
      case 92:
         return jjStopAtPos(0, 97);
      case 93:
         return jjStopAtPos(0, 84);
      case 94:
         return jjStopAtPos(0, 101);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xe406040000000000L, 0xd101L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000401000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x6000000000L, 0x200086L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xb19100000000000L, 0x8000000000430L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800080000L, 0x2000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000040000c0L, 0x10240L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc0000200000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200400000000L, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x700L, 0xf7f80000060000L);
      case 123:
         return jjStopAtPos(0, 32);
      case 124:
         return jjStopAtPos(0, 100);
      case 125:
         return jjStopAtPos(0, 28);
      case 126:
         return jjStopAtPos(0, 25);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x19800000000L, active1, 0L);
      case 62:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000600000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0xc000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xb010004000007c0L, active1, 0xfff80000070e78L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000200000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x18106000080000L, active1, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000000000000000L, active1, 0x1L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0x200000L);
      case 123:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x18020000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x400040000000000L, active1, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0xb01000000000000L, active1, 0x8000000000030L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0xe000000000000000L, active1, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x102000000000L, active1, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x604000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000080000L, active1, 0x2008L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8200000000L, active1, 0x200400L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000007c0L, active1, 0xf7f8000007c240L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0xe4000400000007c0L, active1, 0xf7f80000071241L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10100000080000L, active1, 0x6L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x80200000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xb07000000000000L, active1, 0x800000000c030L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x22000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80808000000000L, active1, 0x200000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L);
      case 123:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(3, 34);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000400000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x28000000080L, active1, 0x4180000042000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L, active1, 0xe0600000030040L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x84204000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000101800000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000080000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x700L, active1, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0xb09000000000000L, active1, 0x8000000000030L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x200008L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x406L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x10000000001000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x3000000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc800L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 123:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(4, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0xa00000000000L, active1, 0x6L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x60000000c000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0xb29000000000000L, active1, 0x18000000000830L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000000000000L, active1, 0x800000000000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10080000080000L, active1, 0x60000000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x700L, active1, 0x80000000011040L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x48000c000000000L, active1, 0x2008L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x12000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x21800000080L, active1, 0x4000000040000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000200000040L, active1, 0x180000020200L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(6, 19);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 36);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 40);
         break;
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x6b01100000000000L, active1, 0x8000000201830L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80400000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x3000000000400L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x600000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x22000000000700L, active1, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x4082200000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 110:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 111);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x80000000010042L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x60000000000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000040L, active1, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x48000000080L, active1, 0x418000004c000L);
      case 121:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 123:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(6, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(7, 39);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(7, 41);
         break;
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0x2008L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000001000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x2204000000700L, active1, 0x1000000000c402L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x1100000000000000L, active1, 0x800L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0x600000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L, active1, 0x4000000040000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000200000000L, active1, 0x15L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x180000000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0x220L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x800100000000040L, active1, 0x3000000020000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0xe0000000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2080400000000000L, active1, 0x10040L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L);
      case 123:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(7, 50);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(7, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x3000000000000L);
      case 40:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(8, 42);
         break;
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000740L, active1, 0x2c400L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1a80100000000000L, active1, 0x60600000210040L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(8, 46);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0x80000000002000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x180000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0x8000000001211L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x2100000000000000L, active1, 0x820L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0x10000000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000080L, active1, 0x4000000040002L);
      case 123:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(8, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x600000000000L);
      case 49:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(9, 8);
         break;
      case 50:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(9, 9);
         break;
      case 51:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(9, 10);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x100002000000000L, active1, 0x180000000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L, active1, 0x10000000020408L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x60000000000000L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(9, 58);
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L, active1, 0x4L);
      case 104:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(9, 47);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000f010L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x3000000000800L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(9, 60);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0x80000000000000L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(9, 62);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(9, 64);
         return jjMoveStringLiteralDfa10_0(active0, 0x1200000000000L, active1, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000080L, active1, 0x4000000040000L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L);
      case 120:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10040L);
      case 123:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(9, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x60000000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0xa00004000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L, active1, 0x4000000040000L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(10, 61);
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000002000L);
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(10, 48);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0x820L);
      case 110:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(10, 112);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x40L, active1, 0x1060000002c402L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(10, 66);
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(10, 67);
         return jjMoveStringLiteralDfa11_0(active0, 0x102000000000L, active1, 0x88180000011240L);
      case 123:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(10, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0x840L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x60000000000000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xc000L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(11, 56);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x80L, active1, 0x8c000000003200L);
      case 102:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(11, 113);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000000L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L, active1, 0x180000000020L);
      case 110:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(11, 109);
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000040L, active1, 0x20400L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L, active1, 0x12L);
      case 115:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(11, 80);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x800004000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(12, 37);
         break;
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000000000000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000L, active1, 0x180000000800L);
      case 100:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(12, 73);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(12, 85);
         break;
      case 101:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000L);
      case 102:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(12, 110);
         break;
      case 104:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x800100000000000L, active1, 0x10L);
      case 107:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(12, 65);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000000000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x60000000000000L);
      case 114:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(12, 77);
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(12, 7);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(12, 114);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000040L, active1, 0x20420L);
      case 120:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000001000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(13, 79);
         break;
      case 40:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(13, 38);
         break;
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x180000000000L);
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10000000000000L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000040L, active1, 0x20400L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000000L, active1, 0x20L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x60000000000000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000000L, active1, 0x800L);
      case 116:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(13, 76);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(13, 115);
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000L, active1, 0x80000000000000L);
      case 121:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(14, 45);
         break;
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80000000000000L);
      case 99:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(14, 57);
         break;
      case 104:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x180000000000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10L);
      case 106:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40000000000000L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10000000000000L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(14, 59);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000L, active1, 0x20000000000000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20L);
      case 120:
         return jjMoveStringLiteralDfa15_0(active0, 0x40L, active1, 0x20400L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(15, 44);
         break;
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80180000000000L);
      case 101:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(15, 116);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x20000000000020L);
      case 115:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(15, 70);
         break;
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(15, 6);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(15, 74);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(15, 81);
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000L, active1, 0x810L);
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x40180000000000L);
      case 113:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x20000000000000L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x40000000000000L);
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x180000000000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x80000000000000L);
      case 117:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x20000000000000L);
      case 118:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x10L);
      case 120:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1);
      return 18;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000000L, active1, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x20000000000010L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x80000000000000L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x180000000000L);
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(18, 75);
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1);
      return 19;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x40180000000000L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x20000000000000L);
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(19, 69);
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000000L, active1, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1);
      return 20;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(20, 43);
         break;
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x20000000000000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x180000000000L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x40000000000000L);
      case 117:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa22_0(active1, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa22_0(active1, 0x80000000000000L);
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(21, 117);
         break;
      case 103:
         return jjMoveStringLiteralDfa22_0(active1, 0x180000000000L);
      case 110:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(21, 118);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1);
}
private int jjMoveStringLiteralDfa22_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1);
      return 22;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa23_0(active1, 0x180000000000L);
      case 101:
         return jjMoveStringLiteralDfa23_0(active1, 0x80000000000000L);
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(22, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1);
}
private int jjMoveStringLiteralDfa23_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1);
      return 23;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa24_0(active1, 0x180000000000L);
      case 115:
         return jjMoveStringLiteralDfa24_0(active1, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1);
}
private int jjMoveStringLiteralDfa24_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(24, 119);
         break;
      case 102:
         return jjMoveStringLiteralDfa25_0(active1, 0x100000000000L);
      case 110:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(24, 107);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1);
}
private int jjMoveStringLiteralDfa25_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(23, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1);
      return 25;
   }
   switch(curChar)
   {
      case 102:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(25, 108);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 70;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  else if (curChar == 40)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  else if (curChar == 40)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  else if (curChar == 40)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  else if (curChar == 40)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  else if (curChar == 40)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  else if (curChar == 40)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  else if (curChar == 40)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  else if (curChar == 40)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  else if (curChar == 40)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  break;
               case 2:
                  if (curChar == 40 && kind > 15)
                     kind = 15;
                  break;
               case 24:
                  if (curChar == 62)
                     kind = 20;
                  break;
               case 25:
               case 27:
               case 36:
                  if (curChar == 61)
                     { jjCheckNAdd(24); }
                  break;
               case 26:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(34); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(35, 36); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(66); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 69:
                  if (curChar == 40 && kind > 24)
                     kind = 24;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddTwoStates(65, 66); }
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 46;
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddTwoStates(65, 66); }
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddTwoStates(65, 66); }
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 56;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddTwoStates(65, 66); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddStates(6, 10); }
                  }
                  if ((0x400000004000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if (curChar == 114)
                     { jjAddStates(11, 12); }
                  else if (curChar == 101)
                     { jjAddStates(13, 14); }
                  else if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 110)
                     { jjAddStates(15, 16); }
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddTwoStates(65, 66); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddTwoStates(65, 66); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddTwoStates(65, 66); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddTwoStates(65, 66); }
                  }
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(66); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddTwoStates(65, 66); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 1:
                  if (curChar == 114)
                     { jjCheckNAdd(2); }
                  break;
               case 6:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 104)
                     { jjCheckNAdd(2); }
                  break;
               case 8:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 111)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if (curChar == 123)
                     kind = 18;
                  break;
               case 15:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 102)
                     { jjCheckNAdd(14); }
                  break;
               case 23:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 28:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 31:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 37:
                  if (curChar == 101)
                     { jjAddStates(13, 14); }
                  break;
               case 38:
                  if (curChar == 100 && kind > 16)
                     kind = 16;
                  break;
               case 39:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 43:
                  if (curChar == 100 && kind > 17)
                     kind = 17;
                  break;
               case 44:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 114)
                     { jjAddStates(11, 12); }
                  break;
               case 49:
                  if (curChar == 101 && kind > 16)
                     kind = 16;
                  break;
               case 50:
                  if (curChar == 99)
                     { jjCheckNAdd(49); }
                  break;
               case 51:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  if (curChar == 101 && kind > 17)
                     kind = 17;
                  break;
               case 55:
                  if (curChar == 99)
                     { jjCheckNAdd(54); }
                  break;
               case 56:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 110)
                     { jjAddStates(15, 16); }
                  break;
               case 60:
                  if (curChar == 110)
                     { jjCheckNAdd(49); }
                  break;
               case 61:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 110)
                     { jjCheckNAdd(54); }
                  break;
               case 63:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAddStates(6, 10); }
                  break;
               case 65:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(66); }
                  break;
               case 67:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 70 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, 
"\147\145\164\55\143\165\162\162\55\143\157\156\164\145\170\164", "\147\145\164\55\141\164\164\151\164\165\144\145\163", 
"\163\145\164\55\155\157\144\145\55\61", "\163\145\164\55\155\157\144\145\55\62", 
"\163\145\164\55\155\157\144\145\55\63", null, null, null, null, null, null, null, null, "\146\157\162\141\154\154\50", 
null, "\77", null, null, null, "\176", "\147\173", "\54", "\175", "\51", "\50", 
"\75\76", "\173", "\155\147\163\145\161\165\145\156\143\145\173", "\162\145\154\173", 
"\146\55\165\156\151\164\50", "\142\55\165\156\151\164\50", 
"\143\157\155\160\157\163\145\55\160\141\164\150\50", "\143\157\156\166\145\162\163\145\55\160\141\164\150\50", 
"\153\55\163\164\141\162\164\50", "\153\55\160\154\165\163\50", "\157\162\55\160\141\164\150\50", 
"\141\156\144\55\160\141\164\150\50", 
"\151\162\162\145\146\154\145\170\151\166\145\55\162\145\163\164\162\151\143\164\50", "\144\157\155\141\151\156\55\162\145\163\164\162\151\143\164\50", 
"\162\141\156\147\145\55\162\145\163\164\162\151\143\164\50", "\142\141\156\147\55\160\141\164\150", 
"\145\155\160\164\171\55\160\141\164\150", "\144\145\146\151\156\145\55\160\141\164\150", 
"\141\164\164\151\164\165\144\145\173", "\141\143\150\151\145\166\145\173", "\144\157\55\157\156\145\173", 
"\144\157\55\141\154\154\173", "\147\165\141\162\144\145\144\173", "\155\147\151\146\173", 
"\155\147\151\164\145\162\141\164\145\173", "\144\145\146\151\156\145\55\146\162\141\155\145", 
"\144\145\146\151\156\145\55\163\145\155\141\156\164\151\143", "\141\144\144\55\142\162\151\144\147\145", 
"\144\145\146\151\156\145\55\162\145\154\141\164\151\157\156", "\142\141\143\153\55\151\156\146\145\162", 
"\141\163\153\55\151\146\55\164\162\165\145", "\141\163\153\55\151\146\55\156\157\164", "\141\163\153\55\167\150\171", 
"\141\163\153\55\167\150\171\156\157\164", "\143\154\145\141\162\55\156\145\164\167\157\162\153", 
"\143\154\145\141\162\55\151\156\146\145\162", "\160\145\162\146\157\162\155\55\141\143\164", 
"\144\145\146\151\156\145\55\156\157\156\160\162\151\155\151\164\151\166\145\55\141\143\164", 
"\144\145\146\151\156\145\55\160\162\151\155\151\164\151\166\145\55\141\143\164", "\147\145\164\55\143\157\156\164\145\170\164\55\150\171\160\163", "\143\173", 
"\141\173", "\147\145\164\55\163\165\160\160\157\162\164\145\144", 
"\144\145\163\143\162\151\142\145\55\143\157\156\164\145\170\164", "\162\145\155\157\166\145\55\146\162\157\155\55\143\157\156\164\145\170\164", 
"\141\144\144\55\164\157\55\143\157\156\164\145\170\164", "\146\157\162\167\141\162\144\55\151\156\146\145\162", 
"\141\143\164\151\166\141\164\145\55\156\157\144\145", "\141\143\164\151\166\141\164\145\55\156\157\144\145\41", 
"\147\145\164\55\143\157\156\164\145\170\164\163", "\163\145\164\55\143\165\162\162\55\143\157\156\164\145\170\164", 
"\163\145\164\55\141\164\164\151\164\165\144\145", "\133", "\135", "\143\165\163\164\157\155\55\155\145\164\150\157\144", "\56", 
"\73", "\72", "\74", "\76", "\47", "\42", "\55", "\53", "\52", "\57", "\134", "\75", 
"\46", "\174", "\136", "\41", "\45", "\100", "\43", "\44", 
"\163\145\164\55\141\165\164\157\155\141\164\151\143\55\150\141\156\144\154\151\156\147\40\157\156", 
"\163\145\164\55\141\165\164\157\155\141\164\151\143\55\150\141\156\144\154\151\156\147\40\157\146\146", "\163\145\164\55\143\141\143\150\145\40\157\156", 
"\163\145\164\55\143\141\143\150\145\40\157\146\146", "\163\145\164\55\155\146\156", "\163\145\164\55\165\166\142\162\40\157\156", 
"\163\145\164\55\165\166\142\162\40\157\146\146", "\163\145\164\55\141\164\164\151\164\165\144\145\163", 
"\144\145\146\151\156\145\55\143\157\156\164\145\170\164", "\163\145\164\55\164\145\154\145\163\143\157\160\141\142\154\145", 
"\163\145\164\55\143\154\157\163\145\144\55\143\157\156\163\145\161\165\145\156\143\145", 
"\163\145\164\55\143\154\157\163\145\144\55\143\157\156\152\165\156\143\164\151\157\156", 
"\163\145\164\55\143\157\156\163\151\163\164\145\156\164\55\141\164\164\151\164\165\144\145\163\40", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   34, 35, 36, 67, 68, 69, 65, 66, 67, 68, 69, 53, 58, 42, 47, 61, 
   63, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MindGRAF_ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MindGRAF_ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 70; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff8fe1L, 0xffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[70];
    private final int[] jjstateSet = new int[2 * 70];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
