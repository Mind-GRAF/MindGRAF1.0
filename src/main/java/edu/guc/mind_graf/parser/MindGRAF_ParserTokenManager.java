/* MindGRAF_ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MindGRAF_ParserTokenManager.java */
package edu.guc.mind_graf.parser;
import edu.guc.mind_graf.context.ContextController;
import java.util.ArrayList;
import java.util.HashMap;
import edu.guc.mind_graf.set.NodeSet;
import edu.guc.mind_graf.set.Set;
import java.util.HashSet;
import edu.guc.mind_graf.cables.DownCable;
import edu.guc.mind_graf.cables.DownCableSet;
import edu.guc.mind_graf.caseFrames.Adjustability;
import edu.guc.mind_graf.context.Context;
import java.util.Collection;
import java.util.Collections;
import edu.guc.mind_graf.exceptions.NoSuchTypeException;
import edu.guc.mind_graf.network.Network;
import edu.guc.mind_graf.nodes.Node;
import edu.guc.mind_graf.relations.Relation;
import edu.guc.mind_graf.nodes.PropositionNode;

/** Token Manager. */
@SuppressWarnings ("unused")
public class MindGRAF_ParserTokenManager implements MindGRAF_ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800001c0000007c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 22;
            return 50;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 24;
         if ((active0 & 0x2000040000L) != 0L)
         {
            jjmatchedKind = 22;
            return 4;
         }
         if ((active0 & 0x1080000000L) != 0L)
         {
            jjmatchedKind = 22;
            return 10;
         }
         if ((active0 & 0xc40000000L) != 0L)
         {
            jjmatchedKind = 22;
            return 21;
         }
         return -1;
      case 1:
         if ((active0 & 0x800001fcc00407c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
            return 50;
         }
         return -1;
      case 2:
         if ((active0 & 0x800001fcc00407c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
            return 50;
         }
         return -1;
      case 3:
         if ((active0 & 0x800000d0800007c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x12c40040000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
            return 50;
         }
         return -1;
      case 4:
         if ((active0 & 0x12c40040000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
            return 50;
         }
         if ((active0 & 0x800000d0800007c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x800000d0800007c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x12c40040000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
            return 50;
         }
         return -1;
      case 6:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 6;
            return 50;
         }
         if ((active0 & 0x10c40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x800000d0800007c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x10c40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x800000d0800007c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x10c40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0xd0800007c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x10c40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0xd0800007c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x10c40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0xc0800000c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x10c40000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0xc0800000c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x10840000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80800000c0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x840000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x8080000040L) != 0L || (active1 & 0x1eL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x840000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x8000000040L) != 0L || (active1 & 0x1eL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x8000000040L) != 0L || (active1 & 0x1eL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active1 & 0x1eL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 57);
      case 34:
         return jjStopAtPos(0, 47);
      case 35:
         return jjStopAtPos(0, 60);
      case 36:
         return jjStopAtPos(0, 61);
      case 37:
         return jjStopAtPos(0, 58);
      case 38:
         return jjStartNfaWithStates_0(0, 54, 24);
      case 39:
         return jjStopAtPos(0, 46);
      case 40:
         return jjStopAtPos(0, 25);
      case 41:
         return jjStopAtPos(0, 24);
      case 42:
         return jjStopAtPos(0, 50);
      case 43:
         return jjStopAtPos(0, 49);
      case 44:
         return jjStopAtPos(0, 26);
      case 45:
         return jjStopAtPos(0, 48);
      case 46:
         return jjStopAtPos(0, 41);
      case 47:
         return jjStopAtPos(0, 51);
      case 58:
         return jjStopAtPos(0, 43);
      case 59:
         return jjStopAtPos(0, 42);
      case 60:
         return jjStopAtPos(0, 44);
      case 61:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 62:
         return jjStopAtPos(0, 45);
      case 63:
         return jjStopAtPos(0, 20);
      case 64:
         return jjStopAtPos(0, 59);
      case 91:
         return jjStopAtPos(0, 32);
      case 92:
         return jjStopAtPos(0, 52);
      case 93:
         return jjStopAtPos(0, 33);
      case 94:
         return jjStopAtPos(0, 56);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1080000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc40000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000040000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000000c0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000008000000700L, 0x1fL);
      case 123:
         return jjStopAtPos(0, 29);
      case 124:
         return jjStopAtPos(0, 55);
      case 125:
         return jjStopAtPos(0, 27);
      case 126:
         return jjStopAtPos(0, 62);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000cc400007c0L, active1, 0x1fL);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000040000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x1080000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0xc40000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000040000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000c0000007c0L, active1, 0x1fL);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000d0800007c0L, active1, 0x1fL);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xc40000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000080L, active1, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000040L, active1, 0x1cL);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x700L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0xc40000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0xc40000000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0xcL);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4080000700L, active1, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L, active1, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000040L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         break;
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x10cc0000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000700L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xcL);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000040L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x700L, active1, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L, active1, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(7, 63);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000040L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0x1cL);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000740L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x14800000000L, active1, 0xcL);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(9, 8);
         break;
      case 50:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(9, 9);
         break;
      case 51:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(9, 10);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000040L, active1, 0x2L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xcL);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(9, 36);
         break;
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x20c0000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x80L, active1, 0x1L);
      case 120:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xcL);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L, active1, 0x1L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000040L, active1, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x40c0000000L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xcL);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(11, 34);
         return jjMoveStringLiteralDfa12_0(active0, 0x20c0000080L, active1, 0x11L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x8800000040L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(11, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(12, 40);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xcL);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(12, 37);
         break;
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(12, 7);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(12, 64);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x8800000040L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa13_0(active0, 0xc0000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000040L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xcL);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(13, 31);
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(14, 30);
         break;
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10L);
      case 99:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 35);
         break;
      case 106:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4L);
      case 120:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000040L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x6L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(15, 6);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(15, 39);
         break;
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(16, 65);
         break;
      case 110:
         return jjMoveStringLiteralDfa17_0(active1, 0x8L);
      case 113:
         return jjMoveStringLiteralDfa17_0(active1, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active1, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active1, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa18_0(active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa19_0(active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active1, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active1, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa21_0(active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active1, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa21_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa22_0(active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa22_0(active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa22_0(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1);
}
private int jjMoveStringLiteralDfa22_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1);
      return 22;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(22, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(22, 67);
         break;
      case 101:
         return jjMoveStringLiteralDfa23_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1);
}
private int jjMoveStringLiteralDfa23_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1);
      return 23;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa24_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1);
}
private int jjMoveStringLiteralDfa24_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(24, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 50;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  else if (curChar == 40)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(46); }
                  }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  else if (curChar == 40)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(46); }
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  else if (curChar == 40)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(46); }
                  }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  else if (curChar == 40)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(46); }
                  }
                  break;
               case 7:
                  if (curChar == 40 && kind > 16)
                     kind = 16;
                  break;
               case 23:
                  if (curChar == 62)
                     kind = 19;
                  break;
               case 24:
               case 26:
               case 35:
                  if (curChar == 61)
                     { jjCheckNAdd(23); }
                  break;
               case 25:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(33); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(46); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  break;
               case 49:
                  if (curChar == 40 && kind > 23)
                     kind = 23;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(46); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAddTwoStates(45, 46); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(46); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAddTwoStates(45, 46); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAddStates(6, 10); }
                  }
                  if ((0x400000004000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if (curChar == 116)
                     { jjAddStates(11, 12); }
                  else if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(46); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAddTwoStates(45, 46); }
                  }
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(46); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAddTwoStates(45, 46); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 1:
                  if (curChar == 101 && kind > 12)
                     kind = 12;
                  break;
               case 2:
                  if (curChar == 115)
                     { jjCheckNAdd(1); }
                  break;
               case 3:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 114)
                     { jjCheckNAdd(7); }
                  break;
               case 8:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 111)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if (curChar == 123)
                     kind = 17;
                  break;
               case 14:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 102)
                     { jjCheckNAdd(13); }
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 27:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 36:
                  if (curChar == 116)
                     { jjAddStates(11, 12); }
                  break;
               case 37:
                  if (curChar == 117)
                     { jjCheckNAdd(1); }
                  break;
               case 38:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 104)
                     { jjCheckNAdd(7); }
                  break;
               case 40:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddStates(6, 10); }
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddTwoStates(45, 46); }
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(46); }
                  break;
               case 47:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(48, 49); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 50 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, 
"\147\145\164\55\143\165\162\162\55\143\157\156\164\145\170\164", "\147\145\164\55\141\164\164\151\164\165\144\145\163", 
"\163\145\164\55\155\157\144\145\55\61", "\163\145\164\55\155\157\144\145\55\62", 
"\163\145\164\55\155\157\144\145\55\63", null, null, null, null, null, null, null, "\146\157\162\141\154\154\50", null, 
"\77", null, null, null, "\51", "\50", "\54", "\175", "\75\76", "\173", 
"\144\145\146\151\156\145\55\143\157\156\164\145\170\164\40", "\141\144\144\55\164\157\55\143\157\156\164\145\170\164", "\133", "\135", 
"\144\145\146\151\156\145\55\146\162\141\155\145", "\144\145\146\151\156\145\55\163\145\155\141\156\164\151\143", 
"\141\144\144\55\142\162\151\144\147\145", "\146\157\162\167\141\162\144\55\151\156\146\145\162", 
"\147\145\164\55\143\157\156\164\145\170\164\163", "\163\145\164\55\143\165\162\162\55\143\157\156\164\145\170\164", 
"\143\165\163\164\157\155\55\155\145\164\150\157\144", "\56", "\73", "\72", "\74", "\76", "\47", "\42", "\55", "\53", "\52", "\57", 
"\134", "\75", "\46", "\174", "\136", "\41", "\45", "\100", "\43", "\44", "\176", 
"\163\145\164\55\165\166\142\162", "\163\145\164\55\141\164\164\151\164\165\144\145\163", 
"\163\145\164\55\164\145\154\145\163\143\157\160\141\142\154\145\40", 
"\163\145\164\55\143\154\157\163\145\144\55\143\157\156\163\145\161\165\145\156\143\145\40", 
"\163\145\164\55\143\154\157\163\145\144\55\143\157\156\152\165\156\143\164\151\157\156\40", 
"\163\145\164\55\143\157\156\163\151\163\164\145\156\164\55\141\164\164\151\164\165\144\145\163\40", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   33, 34, 35, 47, 48, 49, 45, 46, 47, 48, 49, 38, 43, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MindGRAF_ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MindGRAF_ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 50; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff1fe1L, 0x1fL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[50];
    private final int[] jjstateSet = new int[2 * 50];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
